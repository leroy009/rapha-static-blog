---
import { Image } from "astro:assets";
import { getCollection, type CollectionEntry } from "astro:content";
import Prose from "../../components/Prose.astro";
import Layout from "../../layouts/Layout.astro";
import TagListColor from "../../components/TagListColor.astro";

import { formartDate } from "../../utils";
/*i
// Client side rendering of posts 
mport { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

export async function getStaticPaths() {
	const allBlogArticles: CollectionEntry<"blog">[] =
		await getCollection("blog");

	return allBlogArticles.map((entry) => ({
		params: {
			slug: entry.slug,
		},
		props: { entry },
	}));
}

const { entry } = Astro.props;
*/
import { getEntry } from "astro:content";
import BackToArticles from "../../components/ui/BackToArticles.astro";

const { slug } = Astro.params;

if (slug === undefined) {
	throw new Error("Slug is required!");
}

const entry = await getEntry("blog", slug);

if (entry === undefined) {
	return Astro.redirect("/404");
}

const { Content } = await entry.render();
console.log(entry);

const allBlogArticles: CollectionEntry<"blog">[] = await getCollection("blog");
const tags: string[] = allBlogArticles.flatMap(
	(articles: any) => articles.data.tags,
);

const uniqueTags: string[] = [...new Set(tags)];
---

<Layout title={entry.data.title}>
	<section class="container mx-auto max-w-screen-lg mt-10 px-8">
		<BackToArticles />
		<article>
			<h1 class="text-4xl font-bold mb-2">
				{entry.data.title}
			</h1>
			<h3 class="text-lg mb-2">
				Written by {entry.data.author} on {
					formartDate(entry.data.publishedDate)
				}
			</h3>
			<TagListColor tags={entry.data.tags} />
			<Image
				src={entry.data.image}
				alt="Article Image"
				class="w-full h-auto rounded-xl my-6"
			/>
			<p class="text-end italic">
				Photo by
				<a
					class="text-green-600 underline"
					href={entry.data.imageUrl}
					target="_blank"
					rel="nofollow"
				>
					{entry.data.photographer}
				</a>
			</p>

			<div class="flex justify-between gap-4 px-4 mx-auto max-w-screen-xl">
				<article
					class="mx-auto w-full format format-sm sm:format-base lg:format-lg format-blue dark:format-invert"
				>
					<Prose>
						<Content />
					</Prose>
				</article>
				<aside class="hidden xl:block xl:w-80" aria-labelledby="sidebar-label">
					<h3 id="sidebar-label" class="sr-only">Sidebar</h3>
					<div
						class="p-6 mb-6 font-medium text-gray-500 rounded-lg border border-gray-200 dark:border-gray-700 dark:text-gray-400"
					>
						<form class="mb-6">
							<label
								for="default-search"
								class="mb-2 text-sm font-medium text-gray-900 sr-only dark:text-gray-300"
								>Search</label
							>
							<div class="relative">
								<div
									class="flex absolute inset-y-0 left-0 items-center pl-3 pointer-events-none"
								>
									<svg
										class="w-4 h-4 text-gray-500 dark:text-gray-400"
										aria-hidden="true"
										xmlns="http://www.w3.org/2000/svg"
										fill="none"
										viewBox="0 0 20 20"
									>
										<path
											stroke="currentColor"
											stroke-linecap="round"
											stroke-linejoin="round"
											stroke-width="2"
											d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"></path>
									</svg>
								</div>
								<input
									type="search"
									id="default-search"
									class="block py-2.5 pl-9 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
									placeholder="Search..."
									required
								/>
							</div>
						</form>
						<h4 class="mb-6 font-bold text-gray-900 uppercase dark:text-white">
							Recommended topics
						</h4>
						<div class="flex flex-wrap">
							<TagListColor tags={uniqueTags} />
						</div>
					</div>
				</aside>
			</div>

			<!-- <Content /> -->
		</article>
	</section>
</Layout>
